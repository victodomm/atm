/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.task.openapi.api;

import com.task.openapi.model.Account;
import com.task.openapi.model.Ammmount;
import com.task.openapi.model.Withdraw;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-19T12:29:51.858733+01:00[Europe/Madrid]")
@Validated
@Api(value = "atm", description = "the atm API")
public interface AtmApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /atm/createAtm : Create a group of credentials
     *
     * @return accounts with balance and dispense limit (status code 200)
     *         or Invalid Order (status code 500)
     */
    @ApiOperation(value = "Create a group of credentials", nickname = "createAtm", notes = "", tags={ "demo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "accounts with balance and dispense limit"),
        @ApiResponse(code = 500, message = "Invalid Order") })
    @PostMapping(
        value = "/atm/createAtm"
    )
    default ResponseEntity<Void> createAtm() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /atm/balance : Get balance
     *
     * @param id Use case identifier (required)
     * @param pin pin (required)
     * @param account pin (required)
     * @return accounts with balance and dispense limit (status code 200)
     *         or Invalid Order (status code 500)
     */
    @ApiOperation(value = "Get balance", nickname = "getBalance", notes = "", response = Account.class, tags={ "demo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "accounts with balance and dispense limit", response = Account.class),
        @ApiResponse(code = 500, message = "Invalid Order") })
    @GetMapping(
        value = "/atm/balance",
        produces = { "application/json" }
    )
    default ResponseEntity<Account> getBalance(@NotNull @ApiParam(value = "Use case identifier", required = true) @Valid @RequestParam(value = "id", required = true) Long id,@NotNull @ApiParam(value = "pin", required = true) @Valid @RequestParam(value = "pin", required = true) Integer pin,@NotNull @ApiParam(value = "pin", required = true) @Valid @RequestParam(value = "account", required = true) String account) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : \"accountId\", \"balance\" : 0.8008282, \"maxWithdrawal\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /atm/accounts : Get balance
     *
     * @param id Use case identifier (required)
     * @param pin pin (required)
     * @return accounts with balance and dispense limit (status code 200)
     *         or Invalid Order (status code 500)
     */
    @ApiOperation(value = "Get balance", nickname = "getBalanceAccounts", notes = "", response = Account.class, responseContainer = "List", tags={ "demo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "accounts with balance and dispense limit", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Invalid Order") })
    @GetMapping(
        value = "/atm/accounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Account>> getBalanceAccounts(@NotNull @ApiParam(value = "Use case identifier", required = true) @Valid @RequestParam(value = "id", required = true) Long id,@NotNull @ApiParam(value = "pin", required = true) @Valid @RequestParam(value = "pin", required = true) Integer pin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : \"accountId\", \"balance\" : 0.8008282, \"maxWithdrawal\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /atm/withdraw : Get balance
     *
     * @param withdraw withdraw money (required)
     * @return accounts with balance and dispense limit (status code 200)
     *         or Invalid Order (status code 500)
     */
    @ApiOperation(value = "Get balance", nickname = "withdrawMoney", notes = "", response = Ammmount.class, responseContainer = "List", tags={ "demo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "accounts with balance and dispense limit", response = Ammmount.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Invalid Order") })
    @PostMapping(
        value = "/atm/withdraw",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Ammmount>> withdrawMoney(@ApiParam(value = "withdraw money" ,required=true )  @Valid @RequestBody Withdraw withdraw) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
